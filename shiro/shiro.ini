;org.apache.shiro.realm.text.IniRealm：[users]部分指定用户名/密码及其角色；[roles]部分指定角色即权限信息；
;org.apache.shiro.realm.text.PropertiesRealm： user.username=password,role1,role2指定用户名/密码及其角色；
;role.role1=permission1,permission2指定角色及权限信息；
;org.apache.shiro.realm.jdbc.JdbcRealm：通过sql查询相应的信息，如“select password from users where username = ?”获取用户密码，
;“select password, password_salt from users where username = ?”获取用户密码及盐；
;“select role_name from user_roles where username = ?”获取用户角色；
;“select permission from roles_permissions where role_name = ?”获取角色对应的权限信息；
;也可以调用相应的api进行自定义sql；
[main]
#authenticator
authenticator= aaa.authn.VTNAuthenticator
authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authenticator.authenticationStrategy=$authenticationStrategy
securityManager.authenticator=$authenticator

#authorizer
authorizer= aaa.authz.VTNAuthorizer
permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver=$permissionResolver
securityManager.authorizer=$authorizer

#Realm
jdbcRealm= aaa.realms.MySQLRealm
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/vtn
dataSource.username=root
#dataSource.password=root
jdbcRealm.dataSource=$dataSource
securityManager.realms=$jdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM user WHERE user_name = ?
jdbcRealm.userRolesQuery = SELECT role_id FROM user_role left join user using(user_id) WHERE user_name = ?
jdbcRealm.permissionsQuery = SELECT distinct permission_id FROM perm_domain_role left join domain_user using(domain_id) left join user using(user_id) WHERE (domain_id, role_id) IN ( SELECT domain_id, role_id From user left join user_role using(user_id) left join domain_user using(user_id) WHERE user_name = ?)
jdbcRealm.userDomainQuery = SELECT domain_id FROM domain_user left join user using(user_id) WHERE user_name = ?
